# Criar um arquivo de texto com comentários explicando os comandos do Docker

docker_commands = """
# Comandos Básicos do Docker

# 1. Verificar Containers em Execução
# Este comando lista todos os containers que estão atualmente em execução.
docker ps

# 2. Parar um Container
# Este comando para um container em execução. Substitua <container_id> pelo ID ou nome do seu container.
docker stop <container_id>

# 3. Remover um Container
# Este comando remove um container. Substitua <container_id> pelo ID ou nome do seu container.
docker rm <container_id>

# 4. Listar Todas as Imagens
# Este comando lista todas as imagens Docker disponíveis no seu sistema.
docker images

# 5. Remover uma Imagem
# Este comando remove uma imagem Docker. Substitua <image_id> pelo ID da imagem que você deseja remover.
docker rmi <image_id>

# 6. Construir uma Imagem
# Este comando constrói uma nova imagem a partir de um Dockerfile no diretório atual (indicado por '.').
# A imagem é nomeada como 'my-apache-site'.
docker build -t my-apache-site .

# 7. Rodar um Novo Container
# Este comando executa um novo container com base na imagem 'my-apache-site'.
# Ele mapeia a porta 80 do container para a porta 3000 do host.
docker run -d --name my-apache-site -p 4001:80 my-apache-site

# 8. Acessar o Shell de um Container
# Este comando permite que você acesse o shell de um container em execução.
# Substitua <container_id> pelo ID ou nome do seu container.
docker exec -it <container_id> /bin/bash
# ou use /bin/sh para um shell mais leve
docker exec -it <container_id> /bin/sh

# 9. Ver Logs de um Container
# Este comando exibe os logs de um container, útil para depuração.
# Substitua <container_id> pelo ID ou nome do seu container.
docker logs <container_id>

# 10. Verificar Portas Usadas no Windows
# Este comando verifica se uma porta específica está em uso no sistema Windows.
netstat -ano | findstr :<porta>

# 11. Verificar a Disponibilidade da Porta
# Este comando é usado para confirmar se a porta foi liberada após a remoção de um container.
netstat -ano | findstr :<porta>
"""



1. Instalação do Ubuntu:
Você instalou o Ubuntu como parte do Windows Subsystem for Linux (WSL) para facilitar o uso de ferramentas de linha de comando.
2. Configuração do Docker:
Você configurou o Docker no seu sistema e se deparou com erros de permissão ao tentar executar comandos do Docker no Ubuntu.
Tentou ajustar as permissões do arquivo docker.sock e, em seguida, tentou editar o arquivo sudoers para permitir que seu usuário executasse comandos sudo sem a necessidade de uma senha.
3. Criação do Script Bash:
Criou um script Bash (build_image.sh) para automatizar a construção da imagem Docker e a execução do container.
O script inclui as seguintes etapas:
Definição de Variáveis: Especifica o nome da imagem e do container.
Construção da Imagem: Usa docker build para criar a imagem a partir do Dockerfile.
Parada e Remoção do Container: Para e remove um container existente, se ele já existir.
Execução do Container: Executa o container e faz o mapeamento de portas.
Verificação de Erros: Inclui mensagens de erro e sucesso para cada etapa.
4. Execução do Script:
Você tentou executar o script, mas enfrentou problemas de permissão, especialmente em relação ao Docker e ao acesso ao socket.
5. Resolução de Problemas:
Tentou várias abordagens para resolver erros de permissão e executar comandos Docker sem a necessidade de senha.
Considerou usar o cmd do Windows para configurações relacionadas ao Docker e permissões de usuário.

permissao do arquivo 
s> chmod +x build_image.sh

#para iniciar ubundo e mandar a criacao do script 
wsl -d Ubuntu
./build_image.sh